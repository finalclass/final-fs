{
  "name": "final-fs",
  "version": "1.4.4",
  "description": "Promised wrapper for node fs module with usefull additional set of functions.",
  "main": "index.js",
  "scripts": {
    "test": "jasmine-node spec"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:finalclass/final-fs.git"
  },
  "keywords": [
    "fs",
    "filesystem",
    "files",
    "promise",
    "when",
    "recursive"
  ],
  "author": {
    "name": "Szymon Wygna≈Ñski",
    "email": "s@finalclass.net"
  },
  "license": "MIT",
  "dependencies": {
    "node-fs": "~0.1.5",
    "when": "~2.0.1"
  },
  "devDependencies": {
    "jasmine-node": "~1.7.0"
  },
  "readme": "# Final-FS\n\n**MIT License** (see LICENSE.txt)\n\nFinal-FS is an utility library for file system operations.\nIt wrapps nodejs \"fs\" module and provides it's functions in promise pattern.\nAlso it has few additional useful set of functions.\nEvery aynchrouns function in final-fs module uses [when](https://github.com/cujojs/when) Promises.\n\nFor example, checking file existance can be done with this code:\n\n```js\nvar ffs = requtheire('final-fs');\n\nffs.exists('somefile.txt').then(function (exists) {\n    if (exists) {\n        console.log('The file really exists');\n    } else {\n        console.log('File somefile.txt does not exists');\n    }\n});\n```\n\n## Installation\n\n    npm install final-fs\n\n## Paths\n\nAll paths can be specified using array notation. If an array is given as an argument the path.resolved is called.\n\nFor example: `ffs.exists(path.resolve(__dirname, 'var', 'test'))` is same as `ffs.exists([__dirname, 'var', 'test'])`.\n\n## Chaining\n\nFinal-FS uses [when](https://github.com/cujojs/when) library for async calls so there is no worry about the callback hell.\n\nFor example reading a file as a json, altering json object and saving it again would look like this:\n\n```js\nvar ffs = require('final-fs'),\n    path = require('path'),\n    filePath = path.resolve(__dirname, 'data.json');\n\nffs.exists(filePath)\n    .then(function (exists) {\n        if (exists) {\n            return ffs.readJSON(filePath);\n        }\n        return {};\n    })\n    .then(function (obj) {\n        obj.hello = 'World!';\n        return ffs.writeJSON(filePath, obj);\n    })\n    .then(function () {\n        // file data.json is saved now\n    })\n    .otherwise(function (err) {\n        // If something on this call chain went wrong then this function will catch it\n    });\n```\n\nYou can even return the result and chain further in another function. Look at the source code of rmdirRecursive function\nto see how easy it is to work aysnchronous with files using Final-FS and [when](https://github.com/cujojs/when) library.\n\n## Additional functions provided with final-fs\n\n### rmdirRecursiveSync(dirPath:string) : void\n\nRecusrise remove all directory contents. Synchronous version\n\n###### Example: Remove ./tmp folder with it's contents.\n\n```js\nvar ffs = require('final-fs'),\n    path = require('path');\n\nffs.rmdirRecursiveSync(path.resolve(__dirname, 'tmp'));\n// directory ./tmp is removed now\n```\n\n### rmdirRecursive(dirPath:string) : Promise\n\nRecursively remove directory. Asynchronous version\n\n###### Example: Remove ./tmp folder with it's contents\n\n```js\nvar ffs = require('final-fs')\n    path = require('path');\n\nffs.rmdirRecursive(path.resolve(__dirname, 'tmp'))\n    .then(function () {\n        // directory ./tmp is removed now\n    })\n    .otherwise(function (err) {\n        // something went wrong\n    });;\n```\n\n### writeJSON(filePath:string, obj:Object) : Promise\n\nConvert obj into json string and write it to the file in the filePath\n\n###### Example: Insert object into ./data.json file\n\n```js\nvar ffs = require('final-fs')\n    path = require('path'),\n    obj = {foo: 'bar'}\n    filePath = path.resolve(__dirname, 'data.json');\n\nffs.writeJSON(filePath, obj)\n    .then(function () {\n        // file data.json is written now\n    })\n    .otherwise(function(err) {\n        // something went wrong. See err for details\n    });\n```\n\n### readJSON(filePath:string) : Promise\n\nRead file content and turn it into js object\n\n###### Example: read file ./data.json and convert it into a js object.\n\n```js\nvar ffs = require('final-fs'),\n    path = require('path'),\n    filePath = path.resolve(__dirname, 'data.json');\n\nffs.readJSON(filePath)\n    .then(function (obj) {\n        // obj is now an object build from data.json file content\n    })\n    .otherwise(function (err) {\n        // something went wrong. See err for details\n    });\n```\n\n### dirInfo(dirPath:string) : Promise\n\nReturns an array of fs.Stat objects with additional filePath and fileName properties\n\n###### Example\n\n```js\nvar ffs = require('final-fs'),\n    path = require('path'),\n    dirPath = path.resolve(__dirname, 'var');\n\nffs.dirInfo(dirPath)\n    .then(function (stats) {\n        // stats is an array of fs.Stats objects with fileName and filePath properties\n    })\n    .otherwise(function (err) {\n        // error\n    });\n```\n\n### dirFiles(dirPath:string) : Promise\n\nReturns all the files from the directory.\n\n###### Example\n\n```js\nvar ffs = require('final-fs'),\n    path = require('path'),\n    dirPath = path.resolve(__dirname, 'var');\n\nffs.dirFiles(dirPath)\n    .then(function (filesOnly) {\n        // filesOnly is an array of directory files names\n    })\n    .otherwise(function (err) {\n        // error\n    });\n```\n\n### fileNameFilter(text:string) : string\n\nReturns provided `text` as a file name valid string.\n\n###### Example\n\n```js\nvar ffs = require('final-fs');\n\nvar fileName = ffs.fileNameFilter('an Inv@lid t$xt');\n// fileName is now: \"an-invlid-txt\"\n```\n\n## Node-fs module port\n\nFinal-FS uses [nodefs](https://github.com/bpedro/node-fs) module.\nThis module provides 2 functions:\n\n- mkdir\n- mkdirSync\n\nFinal-FS uses these 2 functions and wrappes mkdir asynchrouns function with a promise. It also changes their names:\n\n- mkdir becomes `mkdirRecursive`\n- mkdirSync becomes `mkdirRecursiveSync`\n\n### mkdirRecursiveSync(path:string, ?mode:number=0777) : void\n\nSynchronously creates a directory recursively.\n\n###### Exmaple. Create directory ./var/tmp/tmp2, when directory ./var does not exists\n\n```js\nvar ffs = require('final-fs'),\n    path = require('path'),\n    dirPath = path.resolve(__dirname, 'var', 'tmp', 'tmp2');\n\nffs.mkdirRecursiveSync(dirPath);\n// now ./var/tmp/tmp2 directory is created\n```\n\n### mkdirRecursive(path:string, ?mode:number=0777) : Promise\n\nAsynchronously creates a directory recursively.\n\n###### Exmaple. Create directory ./var/tmp/tmp2, when directory ./var does not exists\n\n```js\nvar ffs = require('final-fs'),\n    path = require('path'),\n    dirPath = path.resolve(__dirname, 'var', 'tmp', 'tmp2');\n\nffs.mkdirRecursiveSync(dirPath)\n    .then(function () {\n        // now ./var/tmp/tmp2 directory is created\n    })\n    .otherwise(function (err) {\n        // something went wrong\n    });\n```\n\n### readdireRecursive(directoryPath:string|Array, ?onlyFiles:boolean=false, ?rootPath='')\n\nRead dire recursively.\nYou can set onlyFiles flag to true and no directory will be included as a Promise result\n\n```js\nvar ffs = require('final-fs'),\n    path = require('path'),\n    dirPath = path.resolve(__dirname, 'var', 'tmp', 'tmp2');\n\nffs.readdirRecursive(dirPath, true, 'my/initial/path')\n    .then(function (files) {\n        // in files variable you got all the files\n    })\n    .otherwise(function (err) {\n        // something went wrong\n    });\n```\n\n## Nodejs fs module functions\n\nThese functions work exatcly the same as in nodejs fs module However asynchrouns functions doesn't take any callbacks.\n  Instead a Promise is returned.\n\nThe rule is simple:\n\n- If callback tooked 2 arguments then error argument would be available in `otherwise` function and\nthe secound argument will be available in `then` function.\n- If only one argument is provided and it's an error then `otherwise` function would have this argument as it's own.\n- If only one argument is provided for the callback and it's not an error (for example the result of fs.exists function)\nthen this argument would be an argument for `then` function.\n\nPorted functions are:\n\n    rename(string, string) : Promise\n    renameSync(string, string) : void\n    ftruncate(number, number) : Promise\n    ftruncateSync(number, number) : void\n    truncate(string, number) : Promise\n    truncateSync(string, number) : void\n    chown(string, number, number) : Promise\n    chownSync(string, number, number) : void\n    fchown(number, number, number) : Promise\n    fchownSync(number, number, number) : void\n    lchown(string, number, number) : Promise\n    lchownSync(string, number, number) : void\n    chmod(string, number) : Promise\n    chmodSync(string, number) : Promise\n    fchmod(number, number) : Promise\n    fchmodSync(number, number) : void\n    lchmod(string, number) : Promise\n    lchmodSync(string, number) : void\n    stat(string) : Promise\n    lstat(string) : Promise\n    fstat(string) : Promise\n    statSync(string) : fs.Stats\n    lstatSync(string) : fs.Stats\n    fstatSync(string) : fs.Stats\n    link(string, string) : Promise\n    linkSync(string, string) : void\n    symlink(string, string, ?'dir'|'file'|'junction'='file') : Promise\n    symlinkSync(string, string, ?'dir'|'file'|'junction'='file') : void\n    readlink(string) : Promise\n    readlinkSync(string) : string\n    realpath(string, ?object=) : Promise\n    realpathSync(string, ?object=) : string\n    unlink(string) : Promise\n    unlinkSync(string) : void\n    rmdir(string) : Promise\n    rmdirSync(string) : void\n    mkdir(string, ?number=0777) : Promise\n    mkdirSync(string, ?number=0777) : void\n    readdir(string) : Promise\n    readdirSync(string) : string[]\n    close(number) : Promise\n    closeSync(number) : void\n    open(string, string, ?number=0666) : Promise\n    openSync(string, string, ?number=0666) : void\n    utimes(string, number, number) : Promise\n    utimesSync(string, number, number) : void\n    futimes(number, number, number) : Promise\n    futimesSync(number, number, number) : void\n    fsync(number) : Promise\n    fsyncSync(number) : void\n    write(number, Buffer, number, number, nbumber) : Promise\n    writeSync(number, Buffer, number, number, nbumber) : number\n    read(number, Buffer, number, number, number) : Promise\n    readSync(number, Buffer, number, number, number) : number\n    readFile(string, ?{?encoding:string=null, ?flag:string=r}=) : Promise\n    readFileSync(string, ?{?encoding:string, ?flag:string}=) : Buffer|string\n    writeFile(string, string|Buffer, ?{?encoding:string, ?mode:number, ?flag:string}=) : Promise\n    writeFileSync(string, string|Buffer, ?{?encoding:string, ?mode:number, ?flag:string}=) : void\n    appendFile(string, string|Buffer, ?{?encoding:string, ?mode:number, ?flag:string}=) : Promise\n    appendFileSync(string, string|Buffer, ?{?encoding:string, ?mode:number, ?flag:string}=) : void\n    watchFile(string, ?{persistent:boolean, interval:number}=, ?function(fs.Stats, fs.Stats)=) : void\n    unwatchFile(string, function(fs.Stats, fs.Stats)) : void\n    watch(string, ?{persistent:boolean, interval:number}=, ?function (string, string)) : fs.FSWatcher\n    exists(string) : Promise\n    existsSync(string) : boolean\n    createReadStream(string, ?{flags:'r', encoding: null, fd: null, mode: 0666, bufferSize: 66020, autoClose: true}) : ReadStream\n    createWriteStream(string, ?{flags: 'w', encoding: null, mode: 0666}=) : WriteStream\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/finalclass/final-fs/issues"
  },
  "_id": "final-fs@1.4.4",
  "_from": "final-fs@",
  "homepage": "https://github.com/finalclass/final-fs"
}
